@{
    ViewData["Title"] = "Scheme";
    int x = 10;
}

<div class="text-center">
    <h1 class="display-4">Interaction scheme</h1>
</div>

<p>
    В отличие от оффлайн программ веб-приложения ориентируются на двух участников взаимодействия.
    <b>Клиент</b> - браузер (или другая программа), которая взаимодействует с пользователем и 
    формирует запрос на ресурсы сайта <br />
    <b>Сервер</b> - backend, программа или совокупность программ, которые обрабатывают запросы
</p>

<ul>
    <li>
        Пользователь вводит в браузер URL или нажимает на определенную ссылку
    </li>
    <li>
        Браузер определяет сетевой адрес сервера (IP) по введеному URL,
        формирует и отправляет HTTP-запрос, который включает все необходимые для него данные
        (URL, Cookie, User-Agent, ...)
    </li>
    <li>
        Серверная часть, в большинстве слачаях, в том числе ASP, состаят из двух "блоков"
        - веб-сервер и веб-приложение (application).
        Веб-сервер слушает порт и принимает "сырой" HTTP-сервер, 
        - разделяет его на части: заголовок, тело, параметры, вложенные файлы и тд;
        - формирует из них понятные для веб-приложения данные (.NET объекты) и передает управление веб-приложению.
        Один веб-сервер может обслуживать несколько сайтов (веб-приложений), в таком случае к задачам сервера входит
        определение того, кому из приложений передать управление.
        Для работы с .NET, как правило, берется IIS (Microsoft Information Server)
        или производные от него
    </li>
    <li>
        Веб-приложение - это скомпилированный код (DLL), который согласовывается с веб-сервером
        и продолжает обработку запроса, "разобранного" сервером.
        Процесс создания DLL и перемещение ее в область видимости веб-сервера называется Deploy.
        Процесс перемещения свидетельствует про то, что изменения в коде проекта
        не всегда сразу же отображаются в браузере, даже при обновлении страницы. Они должни войти в DLL 
        и переместить (с заменой) в веб-сервер (Redeploy)
    </li>
    <li>
        Внутри веб-приложения тоже проходят процессы с разным жизненным циклом.
        Некоторые объекты создаются со стартом приложения и существуют напротяжении всего времени его работы.
        Это контекст данных, службы (хеширования, случайных чисел, шифрования). Такие объекты называют Singleton.
        Объекты контроллеров создаются новые для каждого HTTP-запроса. Это связано с требованиями безопасности
        - если объект был создан для авторизованного пользователя, то второй запрос от неавторозованного потенциально
        может иметь доступ к объектам, созданных для авторизованного пользователя.
        Такая временная область называется RequestScope.
        Третья группа объектов каждый раз (при каждом обращении) должна создавать новые
        экземпляры, например, DateTime, StringBuilder, и тд. Такие объекты называют Transient
    </li>
    <li>
        Конец работы контроллера передает управление представлению. Это HTML с особым синтаксисом Razor,
        который позволяет инжектировать C# код, отдельно передавать данные от контроллера. Для этого предназначены
        два контейнера ViewBag (dynamic) и ViewData (Dictionary)<br />
        - ViewBag: <b>@ViewBag.bagdata</b> <br />
        - ViewData: <b>@ViewData["viewdata"]</b>
    </li>
    <li>
        Сформированный HTML передается веб-серверу (IIS), который его "упаковывает"
        в HTTP-ответ (response) и отсылает клиенту
    </li>
</ul>
<img src="/imgs/url.webp" alt="image">





