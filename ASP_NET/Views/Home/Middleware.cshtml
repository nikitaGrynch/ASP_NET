@{
    ViewData["Title"] = "Middleware";
}

<div class="text-center">
    <h1 class="display-4">Middleware</h1>
</div>

<p>
    Сессии позволяют сохранять данные между разными запросами и, вследствии,
    удерживать аутентификацию пользователя. Но процесс проверки состояния сессии
    (наличие сохраненных данных) должет происходить в каждом методе каждого контроллера.
    Возникает потребность какого-то универсального объекта, который бы выполнял
    активность для всех запросов - всех контроллеров
</p>

<p>
    Концепция Middleware - создание "слоистой" архитектуры программы,
    где запрос, который приходит, проходит все Middleware слой за слоем.
    Более того, ответ (response) проходит эти же слои, но в обратном порядке.
</p>

<p>
    С точки зрения программирования, Middleware - это классы (объекты), которые
    встриваются в "цепочку" последовательного вызова на "промежуточном уровне",
    который предшествует запуска контроллеров. Цепь одномерная,
    последовательная, следовательно порядок Middleware имеет значение.
</p>

<p>
    Создание Middleware
</p>
<ul>
    <li>Создаем папку Middleware в проекте</li>
    <li>
        Создаем класс, в нем необходимо объявить ссылку на следующий Middleware
        и создать метод InvokeAsync / Invoke
    </li>
    <li>
        Метод InvokeAsync / Invoke должен вызывать следуюшее звено,
        в ином случае - оброботка запроса остановится
    </li>
    <li>
        Поскольку конструктор Middleware зарезервирован системной, инжекция
        зависимостей происходит с помощью метода InvokeAsync / Invoke
    </li>
</ul>